# Set-up ---------------------------
# Load packages
library(RSQLite); library(openair); library(lubridate); library(ggplot2); library(scales); library(reshape2); library(plyr); library(stringr)
library(zoo); library(xlsx);
# Set working directory
# Will need to be changed for other systems
setwd("~/Documents/Uni Work/mathsprogramming/Nocturnal ozone component paper/R")
# Clear vairables
rm(list=ls(all=T))
# Load custom functions
source('findNocturnalOzoneMaxima.R')
source('properCase.R')
# Connect to databases ---------------------------
# Will need to be changed for other systems
db.mesonet <- dbConnect(SQLite(), dbname = '~/Documents/Uni Work/mathsprogrammingEdited/Nocturnal ozone component paper/R/bc_ozone_mesonet_database.sqlite')
db.air.quality <- dbConnect(SQLite(), dbname = '~/Documents/Uni Work/mathsprogrammingEdited/Nocturnal ozone component paper/R/british_columbia_air_quality_data.sqlite')
# Get extra information for future merging
info.sites <- dbReadTable(db.mesonet, 'info_sites')
info.sites <- dbReadTable(db.air.quality, 'info_sites')
# info.landuse <- read.xlsx("land.use.descriptions.van.xlsx", sheetName = "Sheet1")
# info.scc <- dbReadTable(db.mesonet, 'info_scc')
# info.scc$day <- ymd(info.scc$day)
data.noc.pm <-  dbGetQuery(db.air.quality, 'SELECT date, o3, no, data.site, info_sites.site_name, info_sites.type
FROM data
JOIN info_sites ON data.site = info_sites.site
AND year BETWEEN 2000 AND 2012
AND time(date) BETWEEN "22:00:00" AND "23:59:59"')
data.noc.am <-  dbGetQuery(db.air.quality, 'SELECT date, o3, no, data.site, info_sites.site_name, info_sites.type
FROM data
JOIN info_sites ON data.site = info_sites.site
AND year BETWEEN 2000 AND 2012
AND time(date) BETWEEN "00:00:00" AND "05:00:00"')
# Merge two data frames
data.noc <- rbind(data.noc.am, data.noc.pm)
# Process nocturnal and daytime dates
data.noc$date <- ymd_hms(data.noc$date)
data.noc$month <- month(data.noc$date)
data.noc$year <- year(data.noc$date)
# Join strings for plotting
data.noc$site_name <- str_c(data.noc$site_name, data.noc$type, sep = ' - ')
data.noc$site_name <- str_c(data.noc$site_name, 'o3', sep = ' - ')
data.noc$time.period <- 'night'
# Remove duplicates
data.noc <- data.noc[!(duplicated(data.noc[c('date', 'site')])), ]
# Calculate staistics
data.stats.noc <- ddply(data.noc, .(site, year), summarise, o3.noc.mean = mean(o3, na.rm = T), o3.noc.sd = sd(o3, na.rm = T),
o3.noc.count = sum(!is.na(o3)))
# write to file for Shanon
# spike.stats <- merge(data.stats.noc, data.spike)
# write.csv(spike.stats, file = "spike.stats.csv")
# Nocturnal Plot
# data.col = "black")
TheilSen(data.noc, 'o3', type = 'site_name', deseason = T, layout = c(6, 4), ylab = 'Deseasonalised nocturnal monthly o3 mean (ppb)', xlab = 'Year')
# Plot o3
data.noc$site_name <- str_replace_all(data.noc$site_name, 'o3', 'NO')
# Plot no
TheilSen(data.noc, 'no', type = 'site_name', deseason = T, layout = c(6, 4), ylab = 'Deseasonalised nocturnal monthly NO mean (ppb)', xlab = 'Year')
View(data.noc)
View(info.sites)
data.noc.subset <- subset(data.noc, site = 'abb');
View(data.noc.subset)
data.noc.complete.subset <- data.noc[complete.cases(data.noc),]
View(data.noc.complete.subset)
TheilSen(data.noc.complete.subset, 'no', type = 'site_name', deseason = T, layout = c(6, 4), ylab = 'Deseasonalised nocturnal monthly NO mean (ppb)', xlab = 'Year')
data.noc.complete.subset <- subset(data.noc, site == 'abb')
View(data.noc.complete.subset)
data.noc.complete.subset <- subset(data.noc, site == c('abb', 'bcp'))
data.noc.complete.subset <- subset(data.noc, site == c('abb', 'bcp',))
data.noc.complete.subset <- subset(data.noc[c(abb', 'bcp')])
data.noc.complete.subset <- subset(data.noc[c('abb', 'bcp')])
data.noc.complete.subset <- subset(data.noc[c('abb', 'bcp')])
data.noc.complete.subset <- subset(data.noc, site == [c('abb', 'bcp')])
data.noc.complete.subset <- subset(data.noc, site == ([c('abb', 'bcp')]))
data.noc.complete.subset <- subset(data.noc, site == 'abb', site == 'bcp')
View(data.noc.complete.subset)
data.noc.complete.subset <- subset(data.noc, site == c['abb','bcp'])
data.noc.complete.subset <- subset(data.noc, site == c[('abb','bcp')])
data.noc.complete.subset <- subset(data.noc, site == c[("abb","bcp")])
data.noc.complete.subset <- subset(data.noc, site IN c[("abb","bcp")])
data.day <-  dbGetQuery(db.air.quality, 'SELECT date, o3, no, data.site, info_sites.site_name, info_sites.type
FROM data
JOIN info_sites ON data.site = info_sites.site
AND year BETWEEN 2000 AND 2012
AND time(date) BETWEEN "11:00:00" AND "16:00:00"')
# Process nocturnal and daytime dates
data.day$date <- ymd_hms(data.day$date)
data.day$month <- month(data.day$date)
data.day$year <- year(data.day$date)
# Join strings for plotting
data.day$site_name <- str_c(data.day$site_name, data.day$type, sep = ' - ')
data.day$site_name <- str_c(data.day$site_name, 'o3', sep = ' - ')
data.day$time.period <- 'day'
# Remove duplicates
data.day <- data.day[!(duplicated(data.day[c('date', 'site')])), ]
# add day and night data together
data <- rbind(data.noc, data.day)
data <- data[order(data$date),]
data$date <- ymd_hms(data$date)
data$month <- month(data$date)
data$year <- year(data$date)
# Calculate staistics
data.stats.day <- ddply(data.day, .(month, year, site_name), summarise, o3.mean = mean(o3, na.rm = T), o3.sd = sd(o3, na.rm = T),
o3.count = sum(!is.na(o3)))
data.stats <- ddply(data, .(month, year, site_name, time.period), summarise, o3.mean = mean(o3, na.rm = T), o3.sd = sd(o3, na.rm = T),
o3.count = sum(!is.na(o3)))
ggplot(data.stats, aes(month, o3.mean, colour = time.period)) + geom_line() + facet_wrap(.(site_name), ncol = 3) +
theme(legend.position = 'bottom') + scale_colour_discrete(name = 'Time period') + xlab('Hour (PST)') +
smoothTrend(data, pollutant = c("o3", "no"), type = c("site_name", "time.period"), ylim=c(0, 85), layout = c(3,1))
# Plot o3
ylab(expression('Hourly mean' ~ O[3] ~ ' concentration (ppb)'))
smoothTrend(data, pollutant = c("o3", "no"), type = c("time.period"), ylim=c(0, 85), main = " Chilliwack Airport: Deseasonalised monthly average O3 and NO mean")
# Daytime Plot
TheilSen(data.day, 'o3', type = 'site_name', deseason = T, layout = c(3, 1), ylab = 'Deseasonalised daytime monthly o3 mean (ppb)', xlab = 'Year')
TheilSen(data.day, 'o3', type = 'site_name', deseason = T, layout = c(3, 1), ylab = 'Deseasonalised daytime monthly o3 mean (ppb)', xlab = 'Year')
TheilSen(data.day, 'o3', type = 'site_name', deseason = T, layout = c(3, 1), ylab = 'Deseasonalised daytime monthly o3 mean (ppb)', xlab = 'Year')
# Set-up ---------------------------
# Load packages
library(RSQLite); library(openair); library(lubridate); library(ggplot2); library(scales); library(reshape2); library(plyr); library(stringr)
library(zoo); library(xlsx);
# Set working directory
# Will need to be changed for other systems
setwd("~/Documents/Uni Work/mathsprogramming/Nocturnal ozone component paper/R")
# Clear vairables
rm(list=ls(all=T))
# Load custom functions
source('findNocturnalOzoneMaxima.R')
source('properCase.R')
# Connect to databases ---------------------------
# Will need to be changed for other systems
db.mesonet <- dbConnect(SQLite(), dbname = '~/Documents/Uni Work/mathsprogrammingEdited/Nocturnal ozone component paper/R/bc_ozone_mesonet_database.sqlite')
db.air.quality <- dbConnect(SQLite(), dbname = '~/Documents/Uni Work/mathsprogrammingEdited/Nocturnal ozone component paper/R/british_columbia_air_quality_data.sqlite')
# Get extra information for future merging
info.sites <- dbReadTable(db.mesonet, 'info_sites')
info.sites <- dbReadTable(db.air.quality, 'info_sites')
# info.landuse <- read.xlsx("land.use.descriptions.van.xlsx", sheetName = "Sheet1")
# info.scc <- dbReadTable(db.mesonet, 'info_scc')
# info.scc$day <- ymd(info.scc$day)
data.day <-  dbGetQuery(db.air.quality, 'SELECT date, o3, no, data.site, info_sites.site_name, info_sites.type
FROM data
JOIN info_sites ON data.site = info_sites.site
AND year BETWEEN 2000 AND 2012
AND time(date) BETWEEN "11:00:00" AND "16:00:00"')
# Process nocturnal and daytime dates
data.day$date <- ymd_hms(data.day$date)
data.day$month <- month(data.day$date)
data.day$year <- year(data.day$date)
# Join strings for plotting
data.day$site_name <- str_c(data.day$site_name, data.day$type, sep = ' - ')
data.day$site_name <- str_c(data.day$site_name, 'o3', sep = ' - ')
data.day$time.period <- 'day'
# Remove duplicates
data.day <- data.day[!(duplicated(data.day[c('date', 'site')])), ]
# add day and night data together
data <- rbind(data.noc, data.day)
TheilSen(data.day, 'o3', type = 'site_name', deseason = T, layout = c(3, 1), ylab = 'Deseasonalised daytime monthly o3 mean (ppb)', xlab = 'Year')
TheilSen(data.day, 'o3', type = 'site_name', deseason = T, layout = c(3, 1), ylab = 'Deseasonalised daytime monthly o3 mean (ppb)', xlab = 'Year')
TheilSen(data.day, 'o3', type = 'site_name', deseason = T, layout = c(6, 4), ylab = 'Deseasonalised daytime monthly o3 mean (ppb)', xlab = 'Year')
TheilSen(data.day, 'o3', type = 'site_name', deseason = T, layout = c(6, 4), ylab = 'Deseasonalised daytime monthly o3 mean (ppb)', xlab = 'Year')
# Set-up ---------------------------
# Load packages
library(RSQLite); library(openair); library(lubridate); library(ggplot2); library(scales); library(reshape2); library(plyr); library(stringr)
library(zoo); library(xlsx);
# Set working directory
# Will need to be changed for other systems
setwd("~/Documents/Uni Work/mathsprogramming/Nocturnal ozone component paper/R")
# Clear vairables
rm(list=ls(all=T))
# Load custom functions
source('findNocturnalOzoneMaxima.R')
source('properCase.R')
# Connect to databases ---------------------------
# Will need to be changed for other systems
db.mesonet <- dbConnect(SQLite(), dbname = '~/Documents/Uni Work/mathsprogrammingEdited/Nocturnal ozone component paper/R/bc_ozone_mesonet_database.sqlite')
db.air.quality <- dbConnect(SQLite(), dbname = '~/Documents/Uni Work/mathsprogrammingEdited/Nocturnal ozone component paper/R/british_columbia_air_quality_data.sqlite')
# Get extra information for future merging
info.sites <- dbReadTable(db.mesonet, 'info_sites')
info.sites <- dbReadTable(db.air.quality, 'info_sites')
# info.landuse <- read.xlsx("land.use.descriptions.van.xlsx", sheetName = "Sheet1")
# info.scc <- dbReadTable(db.mesonet, 'info_scc')
# info.scc$day <- ymd(info.scc$day)
data.day <-  dbGetQuery(db.air.quality, 'SELECT date, o3, no, data.site, info_sites.site_name, info_sites.type
FROM data
JOIN info_sites ON data.site = info_sites.site
AND year BETWEEN 2000 AND 2012
AND time(date) BETWEEN "11:00:00" AND "16:00:00"')
# Process nocturnal and daytime dates
data.day$date <- ymd_hms(data.day$date)
data.day$month <- month(data.day$date)
data.day$year <- year(data.day$date)
# Join strings for plotting
data.day$site_name <- str_c(data.day$site_name, data.day$type, sep = ' - ')
data.day$site_name <- str_c(data.day$site_name, 'o3', sep = ' - ')
data.day$time.period <- 'day'
# Remove duplicates
data.day <- data.day[!(duplicated(data.day[c('date', 'site')])), ]
TheilSen(data.day, 'o3', type = 'site_name', deseason = T, layout = c(3, 1), ylab = 'Deseasonalised daytime monthly o3 mean (ppb)', xlab = 'Year')
TheilSen(data.day, 'o3', type = 'site_name', deseason = T, layout = c(3, 1), ylab = 'Deseasonalised daytime monthly o3 mean (ppb)', xlab = 'Year')
# Set-up ---------------------------
# Load packages
library(RSQLite); library(openair); library(lubridate); library(ggplot2); library(scales); library(reshape2); library(plyr); library(stringr)
library(zoo); library(xlsx);
# Set working directory
# Will need to be changed for other systems
setwd("~/Documents/Uni Work/mathsprogramming/Nocturnal ozone component paper/R")
# Clear vairables
rm(list=ls(all=T))
# Load custom functions
source('findNocturnalOzoneMaxima.R')
source('properCase.R')
# Connect to databases ---------------------------
# Will need to be changed for other systems
db.mesonet <- dbConnect(SQLite(), dbname = '~/Documents/Uni Work/mathsprogrammingEdited/Nocturnal ozone component paper/R/bc_ozone_mesonet_database.sqlite')
db.air.quality <- dbConnect(SQLite(), dbname = '~/Documents/Uni Work/mathsprogrammingEdited/Nocturnal ozone component paper/R/british_columbia_air_quality_data.sqlite')
# Get extra information for future merging
info.sites <- dbReadTable(db.mesonet, 'info_sites')
info.sites <- dbReadTable(db.air.quality, 'info_sites')
# info.landuse <- read.xlsx("land.use.descriptions.van.xlsx", sheetName = "Sheet1")
# info.scc <- dbReadTable(db.mesonet, 'info_scc')
# info.scc$day <- ymd(info.scc$day)
data.day <-  dbGetQuery(db.air.quality, 'SELECT date, o3, no, data.site, info_sites.site_name, info_sites.type
FROM data
JOIN info_sites ON data.site = info_sites.site
AND year BETWEEN 2000 AND 2012
AND time(date) BETWEEN "11:00:00" AND "16:00:00"')
# Process nocturnal and daytime dates
data.day$date <- ymd_hms(data.day$date)
data.day$month <- month(data.day$date)
data.day$year <- year(data.day$date)
# Join strings for plotting
data.day$site_name <- str_c(data.day$site_name, data.day$type, sep = ' - ')
data.day$site_name <- str_c(data.day$site_name, 'o3', sep = ' - ')
data.day$time.period <- 'day'
# Remove duplicates
data.day <- data.day[!(duplicated(data.day[c('date', 'site')])), ]
TheilSen(data.day, 'o3', type = 'site_name', deseason = T, layout = c(3, 1), ylab = 'Deseasonalised daytime monthly o3 mean (ppb)', xlab = 'Year')
TheilSen(data.day, 'o3', type = 'site_name', deseason = T, layout = c(6, 4), ylab = 'Deseasonalised daytime monthly o3 mean (ppb)', xlab = 'Year')
# Alter strings again
data.day$site_name <- str_replace_all(data.day$site_name, 'o3', 'NO')
TheilSen(data.day, 'no', type = 'site_name', deseason = T, layout = c(6, 4), ylab = 'Deseasonalised nocturnal monthly NO mean (ppb)', xlab = 'Year')
TheilSen(data.day, 'no', type = 'site_name', deseason = T, layout = c(6, 4), ylab = 'Deseasonalised daytime monthly NO mean (ppb)', xlab = 'Year')
# Set-up ---------------------------
# Load packages
library(stringr)
library(plyr)
library(lubridate)
library(ggplot2)
library(dplyr)
library(zoo)
library(threadr)
library(ceilr)
setwd("~/Dropbox/Work/Boundary Layer Analysis/Stuart/code/")
for (i in 8:10) {
setwd("~/Dropbox/Work/Boundary Layer Analysis/Stuart/code")
if (i < 10) {
dateString = paste0("2015-0", i)
} else {
dateString = paste0("2015-", i)
for (i in 8:10) {
setwd("~/Dropbox/Work/Boundary Layer Analysis/Stuart/code")
if (i < 10) {
dateString = paste0("2012-0", i)
} else {
dateString = paste0("2012-", i)
}
print(i)
print(dateString)
dataStuart <- plot_multiple_days(dateString, "12:00")
for (i in 8:9) {
setwd("~/Dropbox/Work/Boundary Layer Analysis/Stuart/code")
if (i < 10) {
dateString = paste0("2012-0", i)
} else {
dateString = paste0("2012-", i)
}
print(i)
print(dateString)
dataStuart <- plot_multiple_days(dateString, "12:00")
}
setwd("~/Dropbox/Work/Boundary Layer Analysis/Stuart/code")
source("plot_multiple_days.R")
library(xlsx)
dateString = "2012"
for (i in 8:9) {
setwd("~/Dropbox/Work/Boundary Layer Analysis/Stuart/code")
if (i < 10) {
dateString = paste0("2012-0", i)
} else {
dateString = paste0("2012-", i)
}
print(i)
print(dateString)
dataStuart <- plot_multiple_days(dateString, "12:00")
}
for (i in 5:5) {
setwd("~/Dropbox/Work/Boundary Layer Analysis/Stuart/code")
if (i < 10) {
dateString = paste0("2014-0", i)
} else {
dateString = paste0("2014-", i)
}
print(i)
print(dateString)
dataStuart <- plot_multiple_days(dateString, "12:00")
}
source("plot_multiple_days.R")
library(xlsx)
dateString = "2012"
for (i in 5:5) {
setwd("~/Dropbox/Work/Boundary Layer Analysis/Stuart/code")
if (i < 10) {
dateString = paste0("2014-0", i)
} else {
dateString = paste0("2014-", i)
}
print(i)
print(dateString)
dataStuart <- plot_multiple_days(dateString, "12:00")
}
for (i in 1:3) {
# dateString = paste0(yearmonth, "-", dateArray[i])
if (i < 10) {
dateString = paste0("2014-05-0", i)
} else {
dateString = paste0("2014-05-", i)
}
print(i)
print(dateString)
mixing.height[i] = plot_single_day(dateString)
date[i] = dateString
}
library(stringr)
library(plyr)
library(lubridate)
library(ggplot2)
library(dplyr)
library(zoo)
library(threadr)
library(ceilr)
setwd("~/Dropbox/Work/Boundary Layer Analysis/Stuart/code/")
source("plot_single_day.R")
source("parse_ceilometer_data.R")
source("estimate_mixing_height.R")
mixing.height = NULL;
date = NULL;
for (i in 1:3) {
# dateString = paste0(yearmonth, "-", dateArray[i])
if (i < 10) {
dateString = paste0("2014-05-0", i)
} else {
dateString = paste0("2014-05-", i)
}
print(i)
print(dateString)
mixing.height[i] = plot_single_day(dateString)
date[i] = dateString
}
source("plot_single_day.R")
ateArray = c("04", "07", "10", "14", "26", "31")
dateString = "2012-11-08"
for (i in 1:3) {
# dateString = paste0(yearmonth, "-", dateArray[i])
if (i < 10) {
dateString = paste0("2014-05-0", i)
} else {
dateString = paste0("2014-05-", i)
}
print(i)
print(dateString)
mixing.height[i] = plot_single_day(dateString)
date[i] = dateString
}
for (i in 7:31) {
# dateString = paste0(yearmonth, "-", dateArray[i])
if (i < 10) {
dateString = paste0("2014-05-0", i)
} else {
dateString = paste0("2014-05-", i)
}
print(i)
print(dateString)
mixing.height[i] = plot_single_day(dateString)
date[i] = dateString
}
for (i in 8:31) {
# dateString = paste0(yearmonth, "-", dateArray[i])
if (i < 10) {
dateString = paste0("2014-05-0", i)
} else {
dateString = paste0("2014-05-", i)
}
print(i)
print(dateString)
mixing.height[i] = plot_single_day(dateString)
date[i] = dateString
}
