scale_shape_manual(name=' ', values = c('#F8766D', '#00BFC4'), labels=c('low wind speed','high wind speed'))
ggplot(subset(diurnal.nox), aes(x = hour, y = Mean, shape = variable)) + geom_line(aes(colour = variable)) + geom_point(aes(colour = variable))+
geom_ribbon(aes(ymin = Lower, ymax = Upper, fill = variable), alpha = 0.2) +
scale_y_continuous(breaks = pretty_breaks(n=6))+
theme_bw (base_size = 22, base_family = "Arial") + facet_grid(site~ season)+ xlab ('Time (h)') + ylab ((expression(paste(NO[x]," "," "(ppb)))))+
theme(panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank()) +
scale_colour_manual(name=' ', values = c('#F8766D', '#00BFC4'), labels=c('low wind speed','high wind speed')) +
scale_fill_manual(name=' ', values = c('#F8766D', '#00BFC4'), labels=c('low wind speed','high wind speed'))+
scale_shape_manual(name=' ', values = c('#F8766D', '#00BFC4'), labels=c('low wind speed','high wind speed'))
# Backtrajectories for ozone annual analysis
# Load packages
library(lubridate); library(scales); library(stringr); library(leafletR); library(latticeExtra); library(plyr); library(dplyr); library(ggplot2);library(openair);library(reshape2);library(gridExtra);
library(mapproj)
# Clear all objects
rm(list=ls(all=T))
# read data
data <- read.csv('/Users/lenaweissert/Dropbox/Ozone network/Data analysis Lena/O3 data/melt.all.data.merged.csv', stringsAsFactors = F) %>%
mutate(date = ymd_hms(date))
data <- rename(data, site=variable)
data <- rename(data, o3 = value)
wind.data <- read.csv('/Users/lenaweissert/Dropbox/Ozone network/Data analysis Lena/O3 data/Metservice_hourly_airportwind.csv', stringsAsFactors = F)%>%
mutate(date = ymd_hms(date))
# Merge wind data and o3 data
data.all <- merge(data, wind.data, by="date")%>%
select(date, site, o3, ws, wd)
data.all$wd <- as.numeric(data.all$wd)
data.all$ws <- as.numeric(data.all$ws)
data.all <- cutData(data.all,type = 'season', hemisphere = 'southern' )
timePlot(selectByDate(data.all,  start = "2015-01-13", end = "2015-01-16"), pollutant = "o3", windflow = list(col = "black", lwd = 1, scale = 0.1), type = "site",
ylab = "o3 (ppb)", date.format = "%m/%d", date.breaks = 3,
ref.y = list(h = 28, lty = 2), par.settings=list(fontsize=list(text=16)))
timePlot(selectByDate(data.all, start = "2015-01-13", end = "2015-01-16"), pollutant = c("o3"), type = "site",
ylab = "o3 (ppb)", date.format = "%m/%d",date.breaks = 4, cols = "black",n.row = 3,
ref.y = list(h = 28, lty = 2), par.settings=list(fontsize=list(text=26), srt = 45, adj = 1))
install.packages("devtools")
install.packages("readxl")
devtools::install_github("skgrange/threadr")
devtools::install_github("skgrange/ceilr")
# Set-up ---------------------------
# Load packages
library(stringr)
library(plyr)
library(lubridate)
library(ggplot2)
library(dplyr)
library(zoo)
library(threadr)
library(ceilr)
# Set global options
options(stringsAsFactors = FALSE)
# Set working directory
# This will need to be changed
setwd("C:/Users/lwei999/Dropbox/Boundary Layer Analysis/Anna Spyker/code/Stuart's method/data/AK1503")
# Clear all objects
rm(list = ls(all = TRUE))
datetime = "2015-03-01 12:00"
# Load some data
# Get file list
# The path will probably need to be changed
file.list <- list.files(path = "/AK1503", ".DAT$", full.names = TRUE)
# Filter to single day
file.list <- file.list[grep("A5030112.DAT", file.list)]
# Load backscatter data
data.backscatter <- parse_ceilometer_data("A5030112.DAT")
setwd("/Users/lenaweissert/Dropbox/Boundary Layer Analysis/Anna Spyker/code/Stuart's method/data/AK1503")
rm(list = ls(all = TRUE))
datetime = "2015-03-01 12:00"
file.list <- list.files(path = "/AK1503", ".DAT$", full.names = TRUE)
list.files()
file.list <- list.files(".DAT$", full.names = TRUE)
data.path = ("/Users/lenaweissert/Dropbox/Boundary Layer Analysis/Anna Spyker/code/Stuart's method/data/AK1503/")
file.list <- list.files(path = data.path, ".DAT$", full.names = TRUE)
file.list <- file.list[grep("A5030112.DAT", file.list)]
data.backscatter <- parse_ceilometer_data(file.list)
head(data.backscatter)
# Change wd
setwd("C:/Users/lwei999/Dropbox/Boundary Layer Analysis/Anna Spyker/code/Stuart's method/code/")
# Remove artifact
# Load look-up table
data.artifact <- read.csv("ceilometer_artifact_signal.csv") %>%
mutate(backscatter = ifelse(is.na(backscatter), 0, backscatter)) %>%
select(height, backscatter.artifact = backscatter)
# Subtract artifact from signal
data.backscatter <- data.backscatter %>%
left_join(data.artifact, by = "height") %>%
mutate(backscatter = backscatter - backscatter.artifact,
backscatter = as.integer(backscatter)) %>%
select(-backscatter.artifact)
# Apply a rolling filter, every profile a 125 m rolling mean
data.backscatter <- data.backscatter %>%
group_by(date) %>%
mutate(backscatter = rollmean(backscatter, 125 / 5, fill = NA),
backscatter = as.integer(backscatter)) %>%
ungroup()
# Aggregate data by 10 minutes and do some conditional massaging
data.ten.min <- data.backscatter %>%
mutate(date = round_date_interval(date, "10 min")) %>%
group_by(date, height) %>%
summarise(backscatter = mean(backscatter)) %>%
ungroup() %>%
mutate(backscatter.massaged = ifelse(backscatter >= 200, 200, backscatter),
backscatter.massaged = ifelse(
backscatter.massaged <= 0, 0, backscatter.massaged))
# Look at the aggregate data
head(data.ten.min)
# Plot all loaded data as a surface
data.ten.min %>%
matlab_like_surface_plot("backscatter.massaged")
'''
# Filter to a single profile
data.single.profile <- data.ten.min %>%
filter(date == ymd_hm("2013-01-29 12:00"))
# Plot this profile
data.single.profile %>%
ggplot(aes(height, backscatter.massaged)) + geom_point(colour = "dodgerblue") +
coord_flip()
'''
# Mixing height by gradients
# Add gradient variable
data.ten.min <- data.ten.min %>%
group_by(date) %>%
mutate(gradient = c(NA, diff(backscatter))) %>%
ungroup()
# Filter to two hours during the afternoon
data.filter <- data.ten.min %>%
filter(date == ymd_hm(datetime))
# Estimate mixing heights with a gradient method
data.filter.summary <- data.filter %>%
estimate_mixing_height()
# Join the mixing heights with the profile data
data.filter <- join(data.filter, data.filter.summary, by = "date")
jpeg(file = "~/Dropbox/Work/Boundary Layer Analysis/Stuart/plots/130129.png")
# Plot backscatter with mixing height estimations
data.filter %>%
ggplot(aes(height, backscatter, colour = as.factor(date))) +
geom_point() + coord_flip() + facet_wrap("date") +
geom_vline(aes(xintercept = mixing.height), linetype = "dashed") +
theme(legend.position = "none")
dev.off()
plot_single_day <- function(date) {
# Set global options
options(stringsAsFactors = FALSE)
# Set working directory
# This will need to be changed
setwd("/Users/lenaweissert/Dropbox/Boundary Layer Analysis/Anna Spyker/code/Stuart's method/data/AK1503/")
date = "2015-03-01"
datetime = paste0(date, " 12:00")
# Load some data
# Get file list
# The path will probably need to be changed
wdpattern = paste0("AK", substr(date, 3, 4), substr(date, 6,7), "/")
file.list <- list.files(path = wdpattern, ".DAT$", full.names = TRUE)
# Filter to single day
pattern = paste0("A", substr(date, 4, 4), substr(date, 6, 7), substr(date, 9, 10), substr(datetime, 12, 13))
file.list <- file.list[grep(pattern, file.list)]
# Load backscatter data
data.backscatter <- parse_ceilometer_data(file.list)
# Function can also be used like: parse_ceilometer_data("data/A3010512.DAT")
# Look at the data
# head(data.backscatter)
# Change wd
setwd("C:/Users/lwei999/Dropbox/Boundary Layer Analysis/Anna Spyker/code/Stuart's method/code/")
# Remove artifact
# Load look-up table
data.artifact <- read.csv("ceilometer_artifact_signal.csv") %>%
mutate(backscatter = ifelse(is.na(backscatter), 0, backscatter)) %>%
rename(backscatter.artifact = backscatter)
# Subtract artifact from signal
data.backscatter <- data.backscatter %>%
left_join(data.artifact, by = "height") %>%
mutate(backscatter = backscatter - backscatter.artifact,
backscatter = as.integer(backscatter)) %>%
select(-backscatter.artifact)
# Apply a rolling filter, every profile a 125 m rolling mean
data.backscatter <- data.backscatter %>%
group_by(date) %>%
mutate(backscatter = rollmean(backscatter, 125 / 5, fill = NA),
backscatter = as.integer(backscatter)) %>%
ungroup()
# Aggregate data by 10 minutes and do some conditional massaging
data.ten.min <- data.backscatter %>%
mutate(date = round_date_interval(date, "10 min")) %>%
group_by(date, height) %>%
summarise(backscatter = mean(backscatter)) %>%
ungroup() %>%
mutate(backscatter.massaged = ifelse(backscatter >= 200, 200, backscatter),
backscatter.massaged = ifelse(
backscatter.massaged <= 0, 0, backscatter.massaged))
# Look at the aggregate data
# head(data.ten.min)
# Plot all loaded data as a surface
# data.ten.min %>%
# matlab_like_surface_plot("backscatter.massaged")
# Mixing height by gradients
# Add gradient variable
data.ten.min <- data.ten.min %>%
group_by(date) %>%
mutate(gradient = c(NA, diff(backscatter))) %>%
ungroup()
# Filter midday
data.filter <- data.ten.min %>%
filter(date == ymd_hm(datetime))
# Estimate mixing heights with a gradient method
data.filter.summary <- data.filter %>%
estimate_mixing_height()
# Join the mixing heights with the profile data
data.filter <- join(data.filter, data.filter.summary, by = "date")
lab = paste0('Height (m) = ', data.filter.summary$mixing.height)
# Plot backscatter with mixing height estimations
data.filter %>%
ggplot(aes(height, backscatter, colour = as.factor(date)),xlim=c(0, 4000)) +
geom_point() + coord_flip() + facet_wrap("date") + theme_bw (base_size = 18, base_family = "Arial") +
geom_vline(aes(xintercept = mixing.height), linetype = "dashed") +
theme(legend.position = "none") +
scale_y_continuous(limits = c(-1000, 10000)) +
annotate("text", label = lab, x = 3200, y = 5000)
setwd("C:/Users/lwei999/Dropbox/Boundary Layer Analysis/Anna Spyker/code/Stuart's method/code/")
graph.name = paste0(date, ".png")
ggsave(filename=graph.name, width=8, height = 6)
# dev.off()
return(data.filter.summary$mixing.height)
}
data.filter %>%
ggplot(aes(height, backscatter, colour = as.factor(date)),xlim=c(0, 4000)) +
geom_point() + coord_flip() + facet_wrap("date") + theme_bw (base_size = 18, base_family = "Arial") +
geom_vline(aes(xintercept = mixing.height), linetype = "dashed") +
theme(legend.position = "none") +
scale_y_continuous(limits = c(-1000, 10000)) +
annotate("text", label = lab, x = 3200, y = 5000)
lab = paste0('Height (m) = ', data.filter.summary$mixing.height)
# Plot backscatter with mixing height estimations
data.filter %>%
ggplot(aes(height, backscatter, colour = as.factor(date)),xlim=c(0, 4000)) +
geom_point() + coord_flip() + facet_wrap("date") + theme_bw (base_size = 18, base_family = "Arial") +
geom_vline(aes(xintercept = mixing.height), linetype = "dashed") +
theme(legend.position = "none") +
scale_y_continuous(limits = c(-1000, 10000)) +
annotate("text", label = lab, x = 3200, y = 5000)
data.filter %>%
ggplot(aes(height, backscatter, colour = as.factor(date)),xlim=c(0, 4000)) +
geom_point() + coord_flip() + facet_wrap("date") + theme_bw (base_size = 18, base_family = "Arial") +
geom_vline(aes(xintercept = mixing.height), linetype = "dashed") +
theme(legend.position = "none") + ylab('height (m)')
scale_y_continuous(limits = c(-1000, 10000)) +
annotate("text", label = lab, x = 3200, y = 5000)
data.filter %>%
ggplot(aes(height, backscatter, colour = as.factor(date)),xlim=c(0, 4000)) +
geom_point() + coord_flip() + facet_wrap("date") + theme_bw (base_size = 18, base_family = "Arial") +
geom_vline(aes(xintercept = mixing.height), linetype = "dashed") +
theme(legend.position = "none") + ylab('height (m)')+
scale_y_continuous(limits = c(-1000, 10000)) +
annotate("text", label = lab, x = 3200, y = 5000)
data.filter %>%
ggplot(aes(height, backscatter, colour = as.factor(date)),xlim=c(0, 4000)) +
geom_point() + coord_flip() + facet_wrap("date") + theme_bw (base_size = 18, base_family = "Arial") +
geom_vline(aes(xintercept = mixing.height), linetype = "dashed") +
theme(legend.position = "none") + xlab('height (m)')+
scale_y_continuous(limits = c(-1000, 10000)) +
annotate("text", label = lab, x = 3200, y = 5000)
# Plot backscatter with mixing height estimations
data.filter %>%
ggplot(aes(height, backscatter, colour = as.factor(date)),xlim=c(0, 4000)) +
geom_point() + coord_flip() + facet_wrap("date") + theme_bw (base_size = 20, base_family = "Arial") +
geom_vline(aes(xintercept = mixing.height), linetype = "dashed") +
theme(legend.position = "none") + xlab('height (m)')+
scale_y_continuous(limits = c(-1000, 10000)) +
annotate("text", label = lab, x = 3200, y = 5000)
data.single.profile <- data.ten.min %>%
filter(date == ymd_hm("2013-01-29 12:00"))
data.single.profile %>%
ggplot(aes(height, backscatter.massaged)) + geom_point(colour = "dodgerblue") +
coord_flip()
data.filter %>%
ggplot(aes(height, backscatter, colour = as.factor(date))) +
geom_point() + coord_flip() + facet_wrap("date") +
geom_vline(aes(xintercept = mixing.height), linetype = "dashed") +
theme(legend.position = "none")
plot_single_day <- function(date) {
# Set global options
options(stringsAsFactors = FALSE)
# Set working directory
# This will need to be changed
setwd("/Users/lenaweissert/Dropbox/Boundary Layer Analysis/Anna Spyker/code/Stuart's method/data/AK1503/")
date = "2015-03-01"
datetime = paste0(date, " 12:00")
# Load some data
# Get file list
# The path will probably need to be changed
wdpattern = paste0("AK", substr(date, 3, 4), substr(date, 6,7), "/")
file.list <- list.files(path = wdpattern, ".DAT$", full.names = TRUE)
# Filter to single day
pattern = paste0("A", substr(date, 4, 4), substr(date, 6, 7), substr(date, 9, 10), substr(datetime, 12, 13))
file.list <- file.list[grep(pattern, file.list)]
# Load backscatter data
data.backscatter <- parse_ceilometer_data(file.list)
# Function can also be used like: parse_ceilometer_data("data/A3010512.DAT")
# Look at the data
# head(data.backscatter)
# Change wd
setwd("C:/Users/lwei999/Dropbox/Boundary Layer Analysis/Anna Spyker/code/Stuart's method/code/")
# Remove artifact
# Load look-up table
data.artifact <- read.csv("ceilometer_artifact_signal.csv") %>%
mutate(backscatter = ifelse(is.na(backscatter), 0, backscatter)) %>%
rename(backscatter.artifact = backscatter)
# Subtract artifact from signal
data.backscatter <- data.backscatter %>%
left_join(data.artifact, by = "height") %>%
mutate(backscatter = backscatter - backscatter.artifact,
backscatter = as.integer(backscatter)) %>%
select(-backscatter.artifact)
# Apply a rolling filter, every profile a 125 m rolling mean
data.backscatter <- data.backscatter %>%
group_by(date) %>%
mutate(backscatter = rollmean(backscatter, 125 / 5, fill = NA),
backscatter = as.integer(backscatter)) %>%
ungroup()
# Aggregate data by 10 minutes and do some conditional massaging
data.ten.min <- data.backscatter %>%
mutate(date = round_date_interval(date, "10 min")) %>%
group_by(date, height) %>%
summarise(backscatter = mean(backscatter)) %>%
ungroup() %>%
mutate(backscatter.massaged = ifelse(backscatter >= 200, 200, backscatter),
backscatter.massaged = ifelse(
backscatter.massaged <= 0, 0, backscatter.massaged))
# Look at the aggregate data
# head(data.ten.min)
# Plot all loaded data as a surface
# data.ten.min %>%
# matlab_like_surface_plot("backscatter.massaged")
# Mixing height by gradients
# Add gradient variable
data.ten.min <- data.ten.min %>%
group_by(date) %>%
mutate(gradient = c(NA, diff(backscatter))) %>%
ungroup()
# Filter midday
data.filter <- data.ten.min %>%
filter(date == ymd_hm(datetime))
# Estimate mixing heights with a gradient method
data.filter.summary <- data.filter %>%
estimate_mixing_height()
# Join the mixing heights with the profile data
data.filter <- join(data.filter, data.filter.summary, by = "date")
lab = paste0('Height (m) = ', data.filter.summary$mixing.height)
# Plot backscatter with mixing height estimations
data.filter %>%
ggplot(aes(height, backscatter, colour = as.factor(date)),xlim=c(0, 4000)) +
geom_point() + coord_flip() + facet_wrap("date") + theme_bw (base_size = 20, base_family = "Arial") +
geom_vline(aes(xintercept = mixing.height), linetype = "dashed") +
theme(legend.position = "none") + xlab('height (m)')+
scale_y_continuous(limits = c(-1000, 10000)) +
annotate("text", label = lab, x = 3200, y = 5000)
setwd("C:/Users/lenaweissert/Dropbox/Boundary Layer Analysis/Anna Spyker/code/Stuart's method/data/Stuart/1503/plots/daily/")
graph.name = paste0(date, ".png")
ggsave(filename=graph.name, width=8, height = 6)
# dev.off()
return(data.filter.summary$mixing.height)
}
# Set global options
options(stringsAsFactors = FALSE)
# Set working directory
# This will need to be changed
setwd("/Users/lenaweissert/Dropbox/Boundary Layer Analysis/Anna Spyker/code/Stuart's method/data/AK1503/")
date = "2015-03-01"
datetime = paste0(date, " 12:00")
source("plot_single_day.R")
# plot single day ceilometer
# Set-up ---------------------------
# Load packages
library(stringr)
library(plyr)
library(lubridate)
library(ggplot2)
library(dplyr)
library(zoo)
library(threadr)
library(ceilr)
# Set global options
options(stringsAsFactors = FALSE)
# Set working directory
# This will need to be changed
# office: setwd("C:/Users/lwei999/Dropbox/Boundary Layer Analysis/Anna Spyker/code/Stuart's method/data/AK1503")
setwd("/Users/lenaweissert/Dropbox/Boundary Layer Analysis/Anna Spyker/code/Stuart's method/code/")
data.path = ("/Users/lenaweissert/Dropbox/Boundary Layer Analysis/Anna Spyker/code/Stuart's method/data/AK1503/")
date = '2015-03-01'
source(plot_single_day.R)
# plot single day ceilometer
# Set-up ---------------------------
# Load packages
library(stringr)
library(plyr)
library(lubridate)
library(ggplot2)
library(dplyr)
library(zoo)
library(threadr)
library(ceilr)
# Set global options
options(stringsAsFactors = FALSE)
# Set working directory
# This will need to be changed
# office: setwd("C:/Users/lwei999/Dropbox/Boundary Layer Analysis/Anna Spyker/code/Stuart's method/data/AK1503")
setwd("/Users/lenaweissert/Dropbox/Boundary Layer Analysis/Anna Spyker/code/Stuart's method/code/")
data.path = ("/Users/lenaweissert/Dropbox/Boundary Layer Analysis/Anna Spyker/code/Stuart's method/data/AK1503/")
date = '2015-03-01'
source('plot_single_day.R')
figure <- plot_single_day(date)
figure <- plot_single_day(date)
figure <- plot_single_day(date)
source(plot_single_day.R)
setwd("/Users/lenaweissert/Dropbox/Boundary Layer Analysis/Anna Spyker/code/Stuart's method/code/")
data.path = ("/Users/lenaweissert/Dropbox/Boundary Layer Analysis/Anna Spyker/code/Stuart's method/data/AK1503/")
date = '2015-03-01'
source(plot_single_day.R)
source('plot_single_day.R')
figure <- plot_single_day(date)
wdpattern = paste0("AK", substr(date, 3, 4), substr(date, 6,7), "/")
file.list <- list.files(path = wdpattern, ".DAT$", full.names = TRUE)
setwd("/Users/lenaweissert/Dropbox/Boundary Layer Analysis/Anna Spyker/code/Stuart's method/data/")
date = "2015-03-01"
datetime = paste0(date, " 12:00")
# Load some data
# Get file list
# The path will probably need to be changed
wdpattern = paste0("AK", substr(date, 3, 4), substr(date, 6,7), "/")
file.list <- list.files(path = wdpattern, ".DAT$", full.names = TRUE)
pattern = paste0("A", substr(date, 4, 4), substr(date, 6, 7), substr(date, 9, 10), substr(datetime, 12, 13))
file.list <- file.list[grep(pattern, file.list)]
data.backscatter <- parse_ceilometer_data(file.list)
# Function can also be used like: parse_ceilometer_data("data/A3010512.DAT")
# Look at the data
# head(data.backscatter)
# Change wd
setwd("/Users/lenaweissert/Dropbox/Boundary Layer Analysis/Anna Spyker/code/Stuart's method/code/")
# Remove artifact
# Load look-up table
data.artifact <- read.csv("ceilometer_artifact_signal.csv") %>%
mutate(backscatter = ifelse(is.na(backscatter), 0, backscatter)) %>%
rename(backscatter.artifact = backscatter)
# Subtract artifact from signal
data.backscatter <- data.backscatter %>%
left_join(data.artifact, by = "height") %>%
mutate(backscatter = backscatter - backscatter.artifact,
backscatter = as.integer(backscatter)) %>%
select(-backscatter.artifact)
# Apply a rolling filter, every profile a 125 m rolling mean
data.backscatter <- data.backscatter %>%
group_by(date) %>%
mutate(backscatter = rollmean(backscatter, 125 / 5, fill = NA),
backscatter = as.integer(backscatter)) %>%
ungroup()
# Aggregate data by 10 minutes and do some conditional massaging
data.ten.min <- data.backscatter %>%
mutate(date = round_date_interval(date, "10 min")) %>%
group_by(date, height) %>%
summarise(backscatter = mean(backscatter)) %>%
ungroup() %>%
mutate(backscatter.massaged = ifelse(backscatter >= 200, 200, backscatter),
backscatter.massaged = ifelse(
backscatter.massaged <= 0, 0, backscatter.massaged))
# Look at the aggregate data
# head(data.ten.min)
# Plot all loaded data as a surface
# data.ten.min %>%
# matlab_like_surface_plot("backscatter.massaged")
# Mixing height by gradients
# Add gradient variable
data.ten.min <- data.ten.min %>%
group_by(date) %>%
mutate(gradient = c(NA, diff(backscatter))) %>%
ungroup()
# Filter midday
data.filter <- data.ten.min %>%
filter(date == ymd_hm(datetime))
# Estimate mixing heights with a gradient method
data.filter.summary <- data.filter %>%
estimate_mixing_height()
# Join the mixing heights with the profile data
data.filter <- join(data.filter, data.filter.summary, by = "date")
lab = paste0('Height (m) = ', data.filter.summary$mixing.height)
# Plot backscatter with mixing height estimations
data.filter %>%
ggplot(aes(height, backscatter, colour = as.factor(date)),xlim=c(0, 4000)) +
geom_point() + coord_flip() + facet_wrap("date") + theme_bw (base_size = 20, base_family = "Arial") +
geom_vline(aes(xintercept = mixing.height), linetype = "dashed") +
theme(legend.position = "none") + xlab('height (m)')+
scale_y_continuous(limits = c(-1000, 10000)) +
annotate("text", label = lab, x = 3200, y = 5000)
# plot single day ceilometer
# Set-up ---------------------------
# Load packages
library(stringr)
library(plyr)
library(lubridate)
library(ggplot2)
library(dplyr)
library(zoo)
library(threadr)
library(ceilr)
# Set global options
options(stringsAsFactors = FALSE)
# Set working directory
# This will need to be changed
# office: setwd("C:/Users/lwei999/Dropbox/Boundary Layer Analysis/Anna Spyker/code/Stuart's method/data/AK1503")
setwd("/Users/lenaweissert/Dropbox/Boundary Layer Analysis/Anna Spyker/code/Stuart's method/code/")
data.path = ("/Users/lenaweissert/Dropbox/Boundary Layer Analysis/Anna Spyker/code/Stuart's method/data/AK1503/")
date = '2015-03-01'
source('plot_single_day.R')
fig <- plot_single_day(date)
fig <- plot_single_day(date)
